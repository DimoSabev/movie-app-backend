from flask import Flask, request, jsonify
from flask_cors import CORS
from dotenv import load_dotenv
import os
import numpy as np
import subprocess

import json
import openai
from spotify import get_movie_songs
from spotify_search import search_soundtrack

from huggingface_hub import hf_hub_download
os.environ["HF_HUB_OFFLINE"] = "1"

from utils.audio_to_text import transcribe_audio
from utils.subtitle_matcher import (
    load_index_and_mapping,
    find_best_match,
    SimpleEmbedder,
    get_scenes_up_to,  # üÜï –¥–æ–±–∞–≤–µ–Ω–æ
    get_movie_duration
)
from utils.subtitle_summarizer import (
    summarize_scene,
    summarize_until_now, # üÜï –¥–æ–±–∞–≤–µ–Ω–æ
    extract_character_profiles
)

from utils.generate_image import generate_images_from_summaries
from utils.search_description import find_best_movie
from utils.actor_lookup import get_actor_name
from utils.genre_lookup import get_movie_genre


# üü¶ –†–µ–≥–∏—Å—Ç—ä—Ä –∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–∏ –∑–∞—è–≤–∫–∏
cancelled_requests = set()

load_dotenv()
openai_api_key = os.getenv("OPENAI_API_KEY")
SECRET_TOKEN = os.getenv("FIREBASE_SYNC_SECRET")

app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "*"}})

INDEX_PATH = "embeddings/subtitle_index.faiss"
MAPPING_PATH = "embeddings/subtitle_mapping.pkl"

from utils.subtitle_summarizer import CancelledEarlyException  # –ó–∞–º–µ–Ω—ù —Å –∏—Å—Ç–∏–Ω—Å–∫–∏—è –º–æ–¥—É–ª

@app.route('/')
def home():
    return '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ —Ä–∞–±–æ—Ç–∏!'

@app.route("/summarize", methods=["POST"])
def summarize():
    try:
        import uuid

        input_text = None
        request_id = None

        language = "en"

        if request.is_json:
            data = request.get_json()
            input_text = data.get("text")
            request_id = data.get("request_id", str(uuid.uuid4()))
            language = data.get("language", "en")  # üü¢ –Ω–æ–≤–æ
        elif "audio" in request.files:
            audio_file = request.files["audio"]
            audio_path = "temp_audio.wav"
            audio_file.save(audio_path)
            print("üé§ –ü–æ–ª—É—á–µ–Ω –µ –∞—É–¥–∏–æ —Ñ–∞–π–ª:", audio_path)
            input_text = transcribe_audio(audio_path)
            print("üìù –ò–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç:", input_text)
            request_id = request.form.get("request_id", str(uuid.uuid4()))
            language = request.form.get("language", "en")  # üü¢ –Ω–æ–≤–æ
        else:
            request_id = str(uuid.uuid4())

        # üî¥ –ê–∫–æ –Ω—è–º–∞ —Ç–µ–∫—Å—Ç ‚Äì –∫—Ä–∞–π
        if not input_text:
            return jsonify({"error": "No input text provided"}), 400

        # ‚úÖ –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∏–Ω–¥–µ–∫—Å–∞ –∏ embedding-–∞
        index, mapping = load_index_and_mapping(INDEX_PATH, MAPPING_PATH)
        embedder = SimpleEmbedder()

        # üîç –ù–∞–π-–¥–æ–±—Ä–æ —Å—ä–≤–ø–∞–¥–µ–Ω–∏–µ
        matches = find_best_match(input_text, index, mapping, embedder)
        if not matches:
            return jsonify({"error": "No match found"}), 404

        best = matches[0]
        movie = best["movie"]
        timestamp = best["timestamp"]

        genre = get_movie_genre(movie)
        duration = get_movie_duration(movie, mapping)

        try:
            scenes_until_now = get_scenes_up_to(timestamp, movie, mapping)
            print(f"[DEBUG] –ò–∑–≤–ª–µ—á–µ–Ω–∏ {len(scenes_until_now)} —Å—Ü–µ–Ω–∏ –¥–æ –º–æ–º–µ–Ω—Ç–∞ –∑–∞ —Ñ–∏–ª–º {movie}")
            for i, scene in enumerate(scenes_until_now):
                print(f"‚ñ∂Ô∏è –°—Ü–µ–Ω–∞ {i + 1}:\n{scene[:200]}...\n")

            summary = summarize_until_now(
                scenes_until_now, movie_name=movie, request_id=request_id, language=language
            )
            character_profiles = extract_character_profiles(
                summary, movie_name=movie, request_id=request_id, language=language
            )

            scene_chunks = [
                "\n".join(scenes_until_now[i:i + 5])
                for i in range(0, len(scenes_until_now), 5)
            ]
            print(f"[DEBUG] –°—ä–∑–¥–∞–¥–µ–Ω–∏ {len(scene_chunks)} —á—ä–Ω–∫–∞")

            chunk_summaries = []
            for i, chunk in enumerate(scene_chunks):
                try:
                    chunk_summary = summarize_scene(
                        chunk, movie_name=movie, request_id=request_id, language=language
                    )
                    print(f"[CHUNK {i + 1}] –û–±–æ–±—â–µ–Ω–∏–µ: {chunk_summary}")
                    chunk_summaries.append(chunk_summary)
                except Exception as e:
                    print(f"[ERROR] –ß—ä–Ω–∫ {i + 1}: {e}")
                    chunk_summaries.append("‚ö†Ô∏è –ù–µ—É—Å–ø–µ—à–Ω–æ –æ–±–æ–±—â–µ–Ω–∏–µ.")

        except Exception as e:
            import traceback
            traceback.print_exc()
            summary = "‚ö†Ô∏è –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–æ–±—â–µ–Ω–∏–µ—Ç–æ."
            character_profiles = []
            chunk_summaries = []

        # ‚úÖ –§–∏–Ω–∞–ª–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∑–∞—è–≤–∫–∞
        if request_id in cancelled_requests:
            print(f"[CANCEL] Final cancellation for {request_id}")
            cancelled_requests.discard(request_id)
            return '', 204  # <- —Ç—É–∫ –µ –∫–ª—é—á—ä—Ç: –≤—Ä—ä—â–∞–º–µ –ø—Ä–∞–∑–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä

        # ‚úÖ –°—ä—Å—Ç–∞–≤—è–º–µ –ø—ä–ª–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä
        from flask import Response
        import json

        response_data = {
            "movie": movie,
            "genre": genre,
            "timestamp": timestamp,
            "duration": duration,
            "summary_until_now": summary,
            "character_profiles": character_profiles,
            "chunk_summaries": chunk_summaries,
            "request_id": request_id,
            "language": language
        }

        print("[DEBUG] –û—Ç–≥–æ–≤–æ—Ä –∫—ä–º –∫–ª–∏–µ–Ω—Ç–∞:")
        print(json.dumps(response_data, ensure_ascii=False, indent=2))

        return Response(
            json.dumps(response_data, ensure_ascii=False),
            content_type="application/json"
        )

    except CancelledEarlyException:
        print("[FLASK] –ü—Ä–µ–∫—Ä–∞—Ç–µ–Ω–∞ –∑–∞—è–≤–∫–∞ —á—Ä–µ–∑ CancelledEarlyException")
        return '', 204

    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/generate", methods=["POST"])
def generate_images():
    """
    –ü—Ä–∏–µ–º–∞ JSON —Å summaries (—Å–ø–∏—Å—ä–∫ –æ—Ç —Ç–µ–∫—Å—Ç–æ–≤–∏ —Ä–µ–∑—é–º–µ—Ç–∞) –∏ –≤—Ä—ä—â–∞ —Å–ø–∏—Å—ä–∫ –æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    –ü–æ–¥–¥—ä—Ä–∂–∞ –ø—Ä–µ–∫—ä—Å–≤–∞–Ω–µ —á—Ä–µ–∑ request_id.
    """
    try:
        import uuid

        data = request.get_json()
        if not data:
            return jsonify({"error": "No input data"}), 400

        summaries = data.get("summaries", [])
        size = data.get("size", "1024x1024")
        request_id = data.get("request_id", str(uuid.uuid4()))

        if not summaries:
            return jsonify({"error": "No summaries provided"}), 400

        # üî¥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∑–∞—è–≤–∫–∞—Ç–∞ –µ –º–∞—Ä–∫–∏—Ä–∞–Ω–∞ –∑–∞ —Å–ø–∏—Ä–∞–Ω–µ (–æ—â–µ –ø—Ä–µ–¥–∏ –¥–∞ –∑–∞–ø–æ—á–Ω–µ)
        if request_id in cancelled_requests:
            cancelled_requests.discard(request_id)
            print(f"[CANCEL] –ó–∞—è–≤–∫–∞—Ç–∞ {request_id} –µ –ø—Ä–µ–∫—ä—Å–Ω–∞—Ç–∞ –ø—Ä–µ–¥–∏ —Å—Ç–∞—Ä—Ç–∞ –Ω–∞ /generate")
            return jsonify({"error": "Request was cancelled"}), 400

        images = []
        for i, summary in enumerate(summaries):
            # üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ cancel –ø—Ä–µ–¥–∏ –≤—Å—è–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if request_id in cancelled_requests:
                print(f"[CANCEL] Image generation –ø—Ä–µ–∫—ä—Å–Ω–∞—Ç –ø—Ä–∏ –µ–ª–µ–º–µ–Ω—Ç {i + 1} –∑–∞ {request_id}")
                cancelled_requests.discard(request_id)
                return jsonify({"error": "Request was cancelled"}), 400

            try:
                imgs = generate_images_from_summaries([summary], chunk_size=1, size=size, request_id=request_id)

                # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –°–õ–ï–î –∫–∞—Ç–æ –µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä –æ—Ç OpenAI (–∏–ª–∏ –¥—Ä—É–≥–∞ AI —É—Å–ª—É–≥–∞)
                if request_id in cancelled_requests:
                    print(f"[CANCEL] –ü—Ä–µ–∫—Ä–∞—Ç—è–≤–∞–Ω–µ –°–õ–ï–î –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞ {request_id}")
                    cancelled_requests.discard(request_id)
                    return jsonify({"error": "Request was cancelled"}), 204  # –±–µ–∑ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ

                images.extend(imgs)
            except Exception as e:
                print(f"[ERROR] –ù–µ—É—Å–ø–µ—à–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞ summary {i + 1}: {e}")
                images.append(None)

        return jsonify({"images": images})

    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/cancel", methods=["POST"])
def cancel_request():
    try:
        data = request.get_json()
        request_id = data.get("request_id")

        if not request_id:
            return jsonify({"error": "No request_id provided"}), 400

        cancelled_requests.add(request_id)
        print(f"[CANCEL] –ó–∞—è–≤–∫–∞—Ç–∞ {request_id} –µ –º–∞—Ä–∫–∏—Ä–∞–Ω–∞ –∫–∞—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return jsonify({"status": "cancelled", "request_id": request_id})

    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route("/search_description", methods=["POST"])
def search_description():
    try:
        data = request.get_json()
        description = data.get("description", "").strip()


        if not description:
            return jsonify({"error": "Missing description"}), 400

        result = find_best_movie(description)

        print(f"üîç –ü–æ–ª—É—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ: {description}")
        print(f"üé¨ –†–µ–∑—É–ª—Ç–∞—Ç: {result}")

        return jsonify({
            "movie": (
            result.get("matched_movie", "Unknown")[:-4]
            if result.get("matched_movie", "").lower().endswith(".srt")
            else result.get("matched_movie", "Unknown")
            ),
            "distance": result.get("distance"),
            "source": result.get("match_source")
        })



    except Exception as e:
        return jsonify({"error": str(e)}), 500





@app.route('/sync', methods=['POST'])
def trigger_indexing():
    try:
        print("üì• –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –∑–∞ /sync –æ—Ç Firebase Function.")
        print("üöÄ –ó–∞–ø–æ—á–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏ –∏–Ω–¥–µ–∫—Å–∏—Ä–∞–Ω–µ...")

        # üß† –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ index —Å–∫—Ä–∏–ø—Ç–∞
        index_result = subprocess.run(
            ["python", "generate_index.py"],
            capture_output=True,
            text=True
        )

        if index_result.returncode != 0:
            print("‚ùå –°–∫—Ä–∏–ø—Ç—ä—Ç generate_index.py —Å–µ –ø—Ä–æ–≤–∞–ª–∏:")
            print(index_result.stderr)
            return jsonify({"status": "error", "message": index_result.stderr}), 500

        print("‚úÖ –ò–Ω–¥–µ–∫—Å–∏—Ä–∞–Ω–µ –Ω–∞ —Å—Ü–µ–Ω–∏ –∑–∞–≤—ä—Ä—à–µ–Ω–æ.")
        print("üß† –ó–∞–ø–æ—á–≤–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è...")

        # üé¨ –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è—Ç–∞
        desc_result = subprocess.run(
            ["python", "generate_description_embeddings.py"],
            capture_output=True,
            text=True
        )

        if desc_result.returncode != 0:
            print("‚ùå –°–∫—Ä–∏–ø—Ç—ä—Ç generate_description_embeddings.py —Å–µ –ø—Ä–æ–≤–∞–ª–∏:")
            print(desc_result.stderr)
            return jsonify({"status": "error", "message": desc_result.stderr}), 500

        print("‚úÖ –û–ø–∏—Å–∞–Ω–∏—è—Ç–∞ —Å–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ —É—Å–ø–µ—à–Ω–æ.")
        return jsonify({
            "status": "success",
            "index_output": index_result.stdout,
            "desc_output": desc_result.stdout
        }), 200

    except Exception as e:
        print("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ –Ω–∞ /sync:", e)
        return jsonify({"status": "error", "message": str(e)}), 500




SONG_DB_PATH = "soundtracks.json"

def generate_songs_for_movie(movie_name):
    prompt = (
        f"List all notable songs from the movie '{movie_name}' in the following JSON format:\n\n"
        "[\n"
        "  {\n"
        '    "title": "Song title",\n'
        '    "artist": "Artist name",\n'
        '    "scene": "Scene where the song appears"\n'
        "  }\n"
        "]\n\n"
        "Only include music that actually appeared in the movie. Respond only with valid JSON. No explanation, no markdown."
    )

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.5
        )
        content = response["choices"][0]["message"]["content"]
        print("üéß GPT-4 response:\n", content)

        # –æ–ø–∏—Ç –∑–∞ –¥–µ–∫–æ–¥–∏—Ä–∞–Ω–µ
        songs = json.loads(content)
        return songs
    except Exception as e:
        print("‚ùå GPT-4 error:", e)
        return []

from spotify_search import search_soundtrack

@app.route("/songs", methods=["GET"])
def get_songs():
    movie_name = request.args.get("movie")
    if not movie_name:
        return jsonify({"error": "Missing 'movie' parameter"}), 400

    # –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∫–µ—à
    if os.path.exists(SONG_DB_PATH):
        with open(SONG_DB_PATH, "r", encoding="utf-8") as f:
            all_songs = json.load(f)
    else:
        all_songs = {}

    if movie_name in all_songs:
        return jsonify({
            "movie": movie_name,
            "songs": all_songs[movie_name],
            "source": "cache"
        })

    # üß† –ü—ä—Ä–≤–æ –æ–ø–∏—Ç —Å GPT
    print(f"ü§ñ Trying GPT for '{movie_name}'...")
    gpt_songs = generate_songs_for_movie(movie_name)
    if gpt_songs:
        all_songs[movie_name] = gpt_songs
        with open(SONG_DB_PATH, "w", encoding="utf-8") as f:
            json.dump(all_songs, f, indent=2, ensure_ascii=False)
        return jsonify({
            "movie": movie_name,
            "songs": gpt_songs,
            "source": "gpt"
        })

    # üéµ Fallback –∫—ä–º Spotify
    print(f"üéµ GPT unavailable, falling back to Spotify for '{movie_name}'...")
    result = search_soundtrack(movie_name)
    if result:
        all_songs[movie_name] = result["tracks"]
        with open(SONG_DB_PATH, "w", encoding="utf-8") as f:
            json.dump(all_songs, f, indent=2, ensure_ascii=False)
        return jsonify({
            "movie": movie_name,
            "songs": result["tracks"],
            "source": "spotify"
        })

    return jsonify({"error": "No songs found"}), 404



if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5000)