import pickle
import faiss
import os
from collections import defaultdict

# –ü—ä—Ç–∏—â–∞ –∫—ä–º —Ñ–∞–π–ª–æ–≤–µ—Ç–µ (–∞–∫–æ —Å–∞ –≤ –ø–∞–ø–∫–∞ embeddings)
INDEX_PATH = "embeddings/subtitle_index.faiss"
MAPPING_PATH = "embeddings/subtitle_mapping.pkl"

def load_mapping(mapping_path):
    if not os.path.exists(mapping_path):
        raise FileNotFoundError(f"‚ùå Mapping —Ñ–∞–π–ª—ä—Ç –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞: {mapping_path}")
    with open(mapping_path, "rb") as f:
        return pickle.load(f)

def load_index(index_path):
    if not os.path.exists(index_path):
        raise FileNotFoundError(f"‚ùå FAISS –∏–Ω–¥–µ–∫—Å—ä—Ç –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞: {index_path}")
    return faiss.read_index(index_path)

def diagnose():
    print("üì¶ –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ mapping –∏ –∏–Ω–¥–µ–∫—Å...")
    mapping = load_mapping(MAPPING_PATH)
    index = load_index(INDEX_PATH)

    print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–¥–µ–Ω–∏:")
    print(f" - üß† FAISS entries: {index.ntotal}")
    print(f" - üóÇÔ∏è Mapping entries: {len(mapping)}\n")

    # –ë—Ä–æ–∏–º —Å—Ü–µ–Ω–∏—Ç–µ –ø–æ —Ñ–∏–ª–º
    movie_counts = defaultdict(int)
    for entry in mapping.values():
        movie = entry.get("movie", "‚ùì unknown")
        movie_counts[movie] += 1

    print("üé¨ –°—Ü–µ–Ω–∏ –ø–æ —Ñ–∏–ª–º:")
    for movie, count in sorted(movie_counts.items(), key=lambda x: -x[1]):
        status = "‚úÖ OK" if count > 0 else "‚ùå Missing"
        print(f" - {movie}: {count} —Å—Ü–µ–Ω–∏ ({status})")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —Å—ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ index <-> mapping
    if index.ntotal != len(mapping):
        print("\n‚ö†Ô∏è –ù–µ—Å—ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –∏–Ω–¥–µ–∫—Å –∏ mapping! –ú–æ–≥–∞—Ç –¥–∞ —Å–µ –ø–æ—è–≤—è—Ç –≥—Ä–µ—à–∫–∏ –ø—Ä–∏ —Ç—ä—Ä—Å–µ–Ω–µ.")

if __name__ == "__main__":
    diagnose()