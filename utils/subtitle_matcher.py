import faiss
import pickle
import numpy as np
from langchain.embeddings import OpenAIEmbeddings
from dotenv import load_dotenv
import os

load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")


class SimpleEmbedder:
    def __init__(self):
        if not OPENAI_API_KEY:
            raise ValueError("‚ùå –õ–∏–ø—Å–≤–∞ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª–∞!")
        self.embeddings = OpenAIEmbeddings(openai_api_key=OPENAI_API_KEY)

    def embed_text(self, text):
        if not text or not isinstance(text, str):
            raise ValueError("‚ùå –ù–µ –º–æ–∂–µ –¥–∞ —Å–µ —Å—ä–∑–¥–∞–¥–µ embedding: —Ç–µ–∫—Å—Ç—ä—Ç –µ –ø—Ä–∞–∑–µ–Ω –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω.")
        try:
            return self.embeddings.embed_query(text)
        except Exception as e:
            print(f"[ERROR] Embedding failed: {e}")
            raise


def load_index_and_mapping(index_path, mapping_path):
    if not os.path.exists(index_path):
        raise FileNotFoundError(f"‚ùå –ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω FAISS –∏–Ω–¥–µ–∫—Å –Ω–∞ –ø—ä—Ç—è: {index_path}")
    if not os.path.exists(mapping_path):
        raise FileNotFoundError(f"‚ùå –ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω pickle mapping —Ñ–∞–π–ª –Ω–∞ –ø—ä—Ç—è: {mapping_path}")

    index = faiss.read_index(index_path)
    with open(mapping_path, "rb") as f:
        mapping = pickle.load(f)
    return index, mapping


def find_best_match(user_text, index, mapping, embedder, top_k=1):
    if not user_text or not isinstance(user_text, str):
        raise ValueError("‚ùå –í—Ö–æ–¥–Ω–∏—è—Ç —Ç–µ–∫—Å—Ç –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ –µ –ø—Ä–∞–∑–µ–Ω –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω.")

    vector = np.array([embedder.embed_text(user_text)]).astype("float32")
    distances, indices = index.search(vector, top_k)

    dist_threshold = 0.35  # üö´ –í—Å–∏—á–∫–æ –Ω–∞–¥ 0.35 —Å–µ –æ—Ç—Ä—è–∑–≤–∞

    results = []
    print("\nüîé –ó–∞–ø–æ—á–≤–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ —á—Ä–µ–∑ —Ñ–∏–ª—Ç—ä—Ä–∞...\n")

    for i, score in zip(indices[0], distances[0]):
        try:
            scene = mapping[i]
            if not isinstance(scene, dict):
                continue

            result = scene.copy()
            result["score"] = float(score)

            user_text_clean = user_text.strip()
            words = user_text_clean.lower().split()
            user_text_len = len(words)
            unique_words = set(words)

            # --- –§–∏–ª—Ç—Ä–∏ ---
            reasons = []
            if score > dist_threshold:
                reasons.append(f"–¥–∏—Å—Ç–∞–Ω—Ü–∏—è —Ç–≤—ä—Ä–¥–µ –≥–æ–ª—è–º–∞ (score={score:.4f})")
            if user_text_len < 5 or len(unique_words) < 4:
                reasons.append("—Ç–≤—ä—Ä–¥–µ –∫—Ä–∞—Ç—ä–∫ –∏–ª–∏ –º–∞–ª–∫–æ —É–Ω–∏–∫–∞–ª–Ω–∏ –¥—É–º–∏")

            if reasons:
                print(f"[‚ùå –§–ò–õ–¢–™–†] '{user_text_clean}' ‚ùå –ü—Ä–∏—á–∏–Ω–∏: {', '.join(reasons)}")
                continue

            print(
                f"[‚úÖ –î–û–ë–ê–í–ï–ù–û] '{user_text_clean}' ‚úÖ | "
                f"len={user_text_len}, unique={len(unique_words)}, score={score:.4f}"
            )
            results.append(result)

        except Exception as e:
            print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ mapping[{i}]: {e}")

    if not results:
        print("‚ö†Ô∏è –ù—è–º–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏ ‚Üí No match found")

    return results


def get_scenes_up_to(timestamp, movie_name, mapping):
    scenes = []
    entries = mapping.values() if isinstance(mapping, dict) else mapping

    def time_to_float(t):
        return float(t.replace(",", ".").replace(":", ""))

    try:
        current_time = time_to_float(timestamp)
    except Exception as e:
        print(f"[ERROR] –ù–µ—É—Å–ø–µ—à–Ω–æ –ø–∞—Ä—Å–≤–∞–Ω–µ –Ω–∞ —Ç–µ–∫—É—â–∏—è timestamp: {timestamp} ‚Üí {e}")
        return []

    for entry in entries:
        if isinstance(entry, dict) and entry.get("movie") == movie_name:
            try:
                entry_time = time_to_float(entry["timestamp"])
                if entry_time <= current_time:
                    scenes.append((entry_time, entry["lines"]))
            except Exception as e:
                print(f"[‚ö†Ô∏è] –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ entry: {e}")

    scenes.sort()
    return [lines for _, lines in scenes]

def get_movie_duration(movie_name, mapping):
    latest_time_str = "00:00:00,000"
    latest_time_float = 0.0

    def time_to_float(t):
        try:
            # –ó–∞–º–µ–Ω—è–º–µ –∑–∞–ø–µ—Ç–∞—è —Å —Ç–æ—á–∫–∞ –∑–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª–Ω–æ—Å—Ç
            t = t.replace(",", ".")

            # –†–∞–∑–¥–µ–ª—è–º–µ –Ω–∞ —á–∞—Å—Ç–∏: HH:MM:SS –∏–ª–∏ HH:MM:SS.MS
            h, m, s = t.split(":")
            if "." in s:
                s, ms = s.split(".")
            else:
                ms = "0"

            return int(h) * 3600 + int(m) * 60 + int(s) + int(ms) / 1000.0
        except Exception as e:
            print(f"[‚ö†Ô∏è] time_to_float() –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ '{t}': {e}")
            return 0.0

    for entry in mapping.values():
        if isinstance(entry, dict) and entry.get("movie") == movie_name:
            timestamp = entry.get("timestamp")
            if timestamp:
                current_time_float = time_to_float(timestamp)
                if current_time_float > latest_time_float:
                    latest_time_float = current_time_float
                    latest_time_str = timestamp

    return latest_time_str