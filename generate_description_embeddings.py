import os
import pickle
import faiss
import numpy as np
from dotenv import load_dotenv
from sentence_transformers import SentenceTransformer
import openai

# üîê –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ OpenAI API –∫–ª—é—á
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

# üìÅ –ü—ä—Ç–∏—â–∞
SUBTITLES_DIR = "subtitles"
INDEX_PATH = "description_embeddings/description_index.faiss"
MAPPING_PATH = "description_embeddings/description_mapping.pkl"

# üîÅ Firebase sync (–Ω–æ–≤–æ!)
from firebase_utils import sync_subtitles_from_firebase


def get_embedding_model():
    # –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –º–æ–¥–µ–ª–∞ –≤—ä—Ç—Ä–µ –≤—ä–≤ —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞ –¥–∞ –∏–∑–±–µ–≥–Ω–µ–º segmentation fault
    return SentenceTransformer("all-MiniLM-L6-v2")


def generate_full_description_from_title(filename):
    title = filename.replace("_", " ").replace(".srt", "").strip()
    prompt = f"""
Generate a highly accurate, vivid, and concise 2-3 sentence description of the movie titled '{title}'.
Do not include the title in your response. The description should help users recognize the movie even from vague or short queries.
Focus on key plot elements, characters, and unique traits.
""".strip()

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=150
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"‚ùå Error generating description for {filename}: {e}")
        return None


def main():
    print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–µ —Å—ä—Å Firebase...")
    sync_subtitles_from_firebase()

    # üß† –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ embedding –º–æ–¥–µ–ª–∞
    print("üß† –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ SentenceTransformer...")
    model = get_embedding_model()

    # üß† –°—ä–∑–¥–∞–≤–∞–Ω–µ –∏–ª–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ FAISS –∏–Ω–¥–µ–∫—Å –∏ mapping
    if os.path.exists(INDEX_PATH) and os.path.exists(MAPPING_PATH):
        print("üìÇ –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â –∏–Ω–¥–µ–∫—Å –∏ mapping...")
        faiss_index = faiss.read_index(INDEX_PATH)
        with open(MAPPING_PATH, "rb") as f:
            mapping = pickle.load(f)
    else:
        print("üÜï –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤ –∏–Ω–¥–µ–∫—Å –∏ mapping...")
        faiss_index = faiss.IndexFlatL2(384)
        mapping = {}

    # üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ .srt —Ñ–∞–π–ª–æ–≤–µ
    for filename in os.listdir(SUBTITLES_DIR):
        if filename.endswith(".srt") and filename not in mapping:
            print(f"\nüé¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ {filename}...")
            description = generate_full_description_from_title(filename)
            if description:
                print(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
                try:
                    embedding = model.encode([description])[0]
                    faiss_index.add(np.array([embedding], dtype=np.float32))
                    mapping[filename] = {"description": description}
                except Exception as e:
                    print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ embedding –∑–∞ {filename}: {e}")
            else:
                print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–Ω–∞—Ç –ø–æ—Ä–∞–¥–∏ –≥—Ä–µ—à–∫–∞.")

    # üíæ –ó–∞–ø–∏—Å–≤–∞–Ω–µ
    os.makedirs("description_embeddings", exist_ok=True)
    faiss.write_index(faiss_index, INDEX_PATH)
    with open(MAPPING_PATH, "wb") as f:
        pickle.dump(mapping, f)

    print("\nüéâ –ì–æ—Ç–æ–≤–æ! –ò–Ω–¥–µ–∫—Å—ä—Ç –∏ –æ–ø–∏—Å–∞–Ω–∏—è—Ç–∞ —Å–∞ –æ–±–Ω–æ–≤–µ–Ω–∏.")


if __name__ == "__main__":
    main()